//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TransIp.Api.Remote
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.transip.nl/soap", ConfigurationName="VpsServiceReference1.VpsServicePortType")]
    public interface VpsServicePortType
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#getAvailableProducts", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<Product[]> getAvailableProductsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#getAvailableAddons", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<Product[]> getAvailableAddonsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#getActiveAddonsForVps", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<Product[]> getActiveAddonsForVpsAsync(string vpsName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#getAvailableUpgrades", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<Product[]> getAvailableUpgradesAsync(string vpsName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#getAvailableAddonsForVps", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<Product[]> getAvailableAddonsForVpsAsync(string vpsName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#getCancellableAddonsForVps", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<Product[]> getCancellableAddonsForVpsAsync(string vpsName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#orderVps", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        System.Threading.Tasks.Task orderVpsAsync(string productName, string[] addons, string operatingSystemName, string hostname);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#orderVpsInAvailabilityZone", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        System.Threading.Tasks.Task orderVpsInAvailabilityZoneAsync(string productName, string[] addons, string operatingSystemName, string hostname, string availabilityZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#cloneVps", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        System.Threading.Tasks.Task cloneVpsAsync(string vpsName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#cloneVpsToAvailabilityZone", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        System.Threading.Tasks.Task cloneVpsToAvailabilityZoneAsync(string vpsName, string availabilityZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#orderAddon", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        System.Threading.Tasks.Task orderAddonAsync(string vpsName, string[] addons);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#orderPrivateNetwork", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        System.Threading.Tasks.Task orderPrivateNetworkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#upgradeVps", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        System.Threading.Tasks.Task upgradeVpsAsync(string vpsName, string upgradeToProductName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#cancelVps", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        System.Threading.Tasks.Task cancelVpsAsync(string vpsName, string endTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#cancelAddon", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        System.Threading.Tasks.Task cancelAddonAsync(string vpsName, string addonName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#cancelPrivateNetwork", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        System.Threading.Tasks.Task cancelPrivateNetworkAsync(string privateNetworkName, string endTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#getPrivateNetworksByVps", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<PrivateNetwork[]> getPrivateNetworksByVpsAsync(string vpsName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#getAllPrivateNetworks", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<PrivateNetwork[]> getAllPrivateNetworksAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#addVpsToPrivateNetwork", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        System.Threading.Tasks.Task addVpsToPrivateNetworkAsync(string vpsName, string privateNetworkName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#removeVpsFromPrivateNetwork", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        System.Threading.Tasks.Task removeVpsFromPrivateNetworkAsync(string vpsName, string privateNetworkName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#getTrafficInformationForVps", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<string> getTrafficInformationForVpsAsync(string vpsName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#getPooledTrafficInformation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<string> getPooledTrafficInformationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#start", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        System.Threading.Tasks.Task startAsync(string vpsName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#stop", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        System.Threading.Tasks.Task stopAsync(string vpsName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#reset", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        System.Threading.Tasks.Task resetAsync(string vpsName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#createSnapshot", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        System.Threading.Tasks.Task createSnapshotAsync(string vpsName, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#revertSnapshot", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        System.Threading.Tasks.Task revertSnapshotAsync(string vpsName, string snapshotName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#revertSnapshotToOtherVps", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        System.Threading.Tasks.Task revertSnapshotToOtherVpsAsync(string sourceVpsName, string snapshotName, string destinationVpsName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#removeSnapshot", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        System.Threading.Tasks.Task removeSnapshotAsync(string vpsName, string snapshotName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#revertVpsBackup", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        System.Threading.Tasks.Task revertVpsBackupAsync(string vpsName, int vpsBackupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#getVps", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<Vps> getVpsAsync(string vpsName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#getVpses", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<Vps[]> getVpsesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#getSnapshotsByVps", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<Snapshot[]> getSnapshotsByVpsAsync(string vpsName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#getVpsBackupsByVps", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<VpsBackup[]> getVpsBackupsByVpsAsync(string vpsName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#getOperatingSystems", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<OperatingSystem[]> getOperatingSystemsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#installOperatingSystem", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        System.Threading.Tasks.Task installOperatingSystemAsync(string vpsName, string operatingSystemName, string hostname);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#installOperatingSystemUnattended", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        System.Threading.Tasks.Task installOperatingSystemUnattendedAsync(string vpsName, string operatingSystemName, string base64InstallText);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#getIpsForVps", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<string[]> getIpsForVpsAsync(string vpsName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#getAllIps", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<string[]> getAllIpsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#addIpv6ToVps", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        System.Threading.Tasks.Task addIpv6ToVpsAsync(string vpsName, string ipv6Address);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#updatePtrRecord", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        System.Threading.Tasks.Task updatePtrRecordAsync(string ipAddress, string ptrRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#setCustomerLock", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        System.Threading.Tasks.Task setCustomerLockAsync(string vpsName, bool enabled);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#handoverVps", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        System.Threading.Tasks.Task handoverVpsAsync(string vpsName, string targetAccountname);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:VpsService#VpsServiceServer#getAvailableAvailabilityZones", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(AvailabilityZone))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperatingSystem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VpsBackup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Snapshot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PrivateNetwork))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Product))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<AvailabilityZone[]> getAvailableAvailabilityZonesAsync();
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://www.transip.nl/soap")]
    public partial class Product
    {
        
        private string nameField;
        
        private string descriptionField;
        
        private float priceField;
        
        private float renewalPriceField;
        
        /// <remarks/>
        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public float price
        {
            get
            {
                return this.priceField;
            }
            set
            {
                this.priceField = value;
            }
        }
        
        /// <remarks/>
        public float renewalPrice
        {
            get
            {
                return this.renewalPriceField;
            }
            set
            {
                this.renewalPriceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://www.transip.nl/soap")]
    public partial class AvailabilityZone
    {
        
        private string nameField;
        
        private string countryField;
        
        private bool isDefaultField;
        
        /// <remarks/>
        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string country
        {
            get
            {
                return this.countryField;
            }
            set
            {
                this.countryField = value;
            }
        }
        
        /// <remarks/>
        public bool isDefault
        {
            get
            {
                return this.isDefaultField;
            }
            set
            {
                this.isDefaultField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://www.transip.nl/soap")]
    public partial class OperatingSystem
    {
        
        private string nameField;
        
        private string descriptionField;
        
        private string dateTimeCreateField;
        
        private bool isPreinstallableImageField;
        
        /// <remarks/>
        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string dateTimeCreate
        {
            get
            {
                return this.dateTimeCreateField;
            }
            set
            {
                this.dateTimeCreateField = value;
            }
        }
        
        /// <remarks/>
        public bool isPreinstallableImage
        {
            get
            {
                return this.isPreinstallableImageField;
            }
            set
            {
                this.isPreinstallableImageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://www.transip.nl/soap")]
    public partial class VpsBackup
    {
        
        private int idField;
        
        private string dateTimeCreateField;
        
        private int diskSizeField;
        
        private string operatingSystemField;
        
        private string availabilityZoneField;
        
        /// <remarks/>
        public int id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string dateTimeCreate
        {
            get
            {
                return this.dateTimeCreateField;
            }
            set
            {
                this.dateTimeCreateField = value;
            }
        }
        
        /// <remarks/>
        public int diskSize
        {
            get
            {
                return this.diskSizeField;
            }
            set
            {
                this.diskSizeField = value;
            }
        }
        
        /// <remarks/>
        public string operatingSystem
        {
            get
            {
                return this.operatingSystemField;
            }
            set
            {
                this.operatingSystemField = value;
            }
        }
        
        /// <remarks/>
        public string availabilityZone
        {
            get
            {
                return this.availabilityZoneField;
            }
            set
            {
                this.availabilityZoneField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://www.transip.nl/soap")]
    public partial class Snapshot
    {
        
        private string nameField;
        
        private string descriptionField;
        
        private string dateTimeCreateField;
        
        private string availabilityZoneField;
        
        /// <remarks/>
        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string dateTimeCreate
        {
            get
            {
                return this.dateTimeCreateField;
            }
            set
            {
                this.dateTimeCreateField = value;
            }
        }
        
        /// <remarks/>
        public string availabilityZone
        {
            get
            {
                return this.availabilityZoneField;
            }
            set
            {
                this.availabilityZoneField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://www.transip.nl/soap")]
    public partial class Vps
    {
        
        private string nameField;
        
        private string descriptionField;
        
        private string operatingSystemField;
        
        private string diskSizeField;
        
        private string memorySizeField;
        
        private string cpusField;
        
        private string statusField;
        
        private string ipAddressField;
        
        private string ipv6AddressField;
        
        private string macAddressField;
        
        private string vncHostnameField;
        
        private string vncPortNumberField;
        
        private string vncPasswordField;
        
        private bool isBlockedField;
        
        private bool isCustomerLockedField;
        
        private string availabilityZoneField;
        
        /// <remarks/>
        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string operatingSystem
        {
            get
            {
                return this.operatingSystemField;
            }
            set
            {
                this.operatingSystemField = value;
            }
        }
        
        /// <remarks/>
        public string diskSize
        {
            get
            {
                return this.diskSizeField;
            }
            set
            {
                this.diskSizeField = value;
            }
        }
        
        /// <remarks/>
        public string memorySize
        {
            get
            {
                return this.memorySizeField;
            }
            set
            {
                this.memorySizeField = value;
            }
        }
        
        /// <remarks/>
        public string cpus
        {
            get
            {
                return this.cpusField;
            }
            set
            {
                this.cpusField = value;
            }
        }
        
        /// <remarks/>
        public string status
        {
            get
            {
                return this.statusField;
            }
            set
            {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public string ipAddress
        {
            get
            {
                return this.ipAddressField;
            }
            set
            {
                this.ipAddressField = value;
            }
        }
        
        /// <remarks/>
        public string ipv6Address
        {
            get
            {
                return this.ipv6AddressField;
            }
            set
            {
                this.ipv6AddressField = value;
            }
        }
        
        /// <remarks/>
        public string macAddress
        {
            get
            {
                return this.macAddressField;
            }
            set
            {
                this.macAddressField = value;
            }
        }
        
        /// <remarks/>
        public string vncHostname
        {
            get
            {
                return this.vncHostnameField;
            }
            set
            {
                this.vncHostnameField = value;
            }
        }
        
        /// <remarks/>
        public string vncPortNumber
        {
            get
            {
                return this.vncPortNumberField;
            }
            set
            {
                this.vncPortNumberField = value;
            }
        }
        
        /// <remarks/>
        public string vncPassword
        {
            get
            {
                return this.vncPasswordField;
            }
            set
            {
                this.vncPasswordField = value;
            }
        }
        
        /// <remarks/>
        public bool isBlocked
        {
            get
            {
                return this.isBlockedField;
            }
            set
            {
                this.isBlockedField = value;
            }
        }
        
        /// <remarks/>
        public bool isCustomerLocked
        {
            get
            {
                return this.isCustomerLockedField;
            }
            set
            {
                this.isCustomerLockedField = value;
            }
        }
        
        /// <remarks/>
        public string availabilityZone
        {
            get
            {
                return this.availabilityZoneField;
            }
            set
            {
                this.availabilityZoneField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://www.transip.nl/soap")]
    public partial class PrivateNetwork
    {
        
        private string nameField;
        
        /// <remarks/>
        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    public interface VpsServicePortTypeChannel : VpsServicePortType, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    public partial class VpsServicePortTypeClient : System.ServiceModel.ClientBase<VpsServicePortType>, VpsServicePortType
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public VpsServicePortTypeClient() : 
                base(VpsServicePortTypeClient.GetDefaultBinding(), VpsServicePortTypeClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.VpsServicePort.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public VpsServicePortTypeClient(EndpointConfiguration endpointConfiguration) : 
                base(VpsServicePortTypeClient.GetBindingForEndpoint(endpointConfiguration), VpsServicePortTypeClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public VpsServicePortTypeClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(VpsServicePortTypeClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public VpsServicePortTypeClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(VpsServicePortTypeClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public VpsServicePortTypeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<Product[]> getAvailableProductsAsync()
        {
            return base.Channel.getAvailableProductsAsync();
        }
        
        public System.Threading.Tasks.Task<Product[]> getAvailableAddonsAsync()
        {
            return base.Channel.getAvailableAddonsAsync();
        }
        
        public System.Threading.Tasks.Task<Product[]> getActiveAddonsForVpsAsync(string vpsName)
        {
            return base.Channel.getActiveAddonsForVpsAsync(vpsName);
        }
        
        public System.Threading.Tasks.Task<Product[]> getAvailableUpgradesAsync(string vpsName)
        {
            return base.Channel.getAvailableUpgradesAsync(vpsName);
        }
        
        public System.Threading.Tasks.Task<Product[]> getAvailableAddonsForVpsAsync(string vpsName)
        {
            return base.Channel.getAvailableAddonsForVpsAsync(vpsName);
        }
        
        public System.Threading.Tasks.Task<Product[]> getCancellableAddonsForVpsAsync(string vpsName)
        {
            return base.Channel.getCancellableAddonsForVpsAsync(vpsName);
        }
        
        public System.Threading.Tasks.Task orderVpsAsync(string productName, string[] addons, string operatingSystemName, string hostname)
        {
            return base.Channel.orderVpsAsync(productName, addons, operatingSystemName, hostname);
        }
        
        public System.Threading.Tasks.Task orderVpsInAvailabilityZoneAsync(string productName, string[] addons, string operatingSystemName, string hostname, string availabilityZone)
        {
            return base.Channel.orderVpsInAvailabilityZoneAsync(productName, addons, operatingSystemName, hostname, availabilityZone);
        }
        
        public System.Threading.Tasks.Task cloneVpsAsync(string vpsName)
        {
            return base.Channel.cloneVpsAsync(vpsName);
        }
        
        public System.Threading.Tasks.Task cloneVpsToAvailabilityZoneAsync(string vpsName, string availabilityZone)
        {
            return base.Channel.cloneVpsToAvailabilityZoneAsync(vpsName, availabilityZone);
        }
        
        public System.Threading.Tasks.Task orderAddonAsync(string vpsName, string[] addons)
        {
            return base.Channel.orderAddonAsync(vpsName, addons);
        }
        
        public System.Threading.Tasks.Task orderPrivateNetworkAsync()
        {
            return base.Channel.orderPrivateNetworkAsync();
        }
        
        public System.Threading.Tasks.Task upgradeVpsAsync(string vpsName, string upgradeToProductName)
        {
            return base.Channel.upgradeVpsAsync(vpsName, upgradeToProductName);
        }
        
        public System.Threading.Tasks.Task cancelVpsAsync(string vpsName, string endTime)
        {
            return base.Channel.cancelVpsAsync(vpsName, endTime);
        }
        
        public System.Threading.Tasks.Task cancelAddonAsync(string vpsName, string addonName)
        {
            return base.Channel.cancelAddonAsync(vpsName, addonName);
        }
        
        public System.Threading.Tasks.Task cancelPrivateNetworkAsync(string privateNetworkName, string endTime)
        {
            return base.Channel.cancelPrivateNetworkAsync(privateNetworkName, endTime);
        }
        
        public System.Threading.Tasks.Task<PrivateNetwork[]> getPrivateNetworksByVpsAsync(string vpsName)
        {
            return base.Channel.getPrivateNetworksByVpsAsync(vpsName);
        }
        
        public System.Threading.Tasks.Task<PrivateNetwork[]> getAllPrivateNetworksAsync()
        {
            return base.Channel.getAllPrivateNetworksAsync();
        }
        
        public System.Threading.Tasks.Task addVpsToPrivateNetworkAsync(string vpsName, string privateNetworkName)
        {
            return base.Channel.addVpsToPrivateNetworkAsync(vpsName, privateNetworkName);
        }
        
        public System.Threading.Tasks.Task removeVpsFromPrivateNetworkAsync(string vpsName, string privateNetworkName)
        {
            return base.Channel.removeVpsFromPrivateNetworkAsync(vpsName, privateNetworkName);
        }
        
        public System.Threading.Tasks.Task<string> getTrafficInformationForVpsAsync(string vpsName)
        {
            return base.Channel.getTrafficInformationForVpsAsync(vpsName);
        }
        
        public System.Threading.Tasks.Task<string> getPooledTrafficInformationAsync()
        {
            return base.Channel.getPooledTrafficInformationAsync();
        }
        
        public System.Threading.Tasks.Task startAsync(string vpsName)
        {
            return base.Channel.startAsync(vpsName);
        }
        
        public System.Threading.Tasks.Task stopAsync(string vpsName)
        {
            return base.Channel.stopAsync(vpsName);
        }
        
        public System.Threading.Tasks.Task resetAsync(string vpsName)
        {
            return base.Channel.resetAsync(vpsName);
        }
        
        public System.Threading.Tasks.Task createSnapshotAsync(string vpsName, string description)
        {
            return base.Channel.createSnapshotAsync(vpsName, description);
        }
        
        public System.Threading.Tasks.Task revertSnapshotAsync(string vpsName, string snapshotName)
        {
            return base.Channel.revertSnapshotAsync(vpsName, snapshotName);
        }
        
        public System.Threading.Tasks.Task revertSnapshotToOtherVpsAsync(string sourceVpsName, string snapshotName, string destinationVpsName)
        {
            return base.Channel.revertSnapshotToOtherVpsAsync(sourceVpsName, snapshotName, destinationVpsName);
        }
        
        public System.Threading.Tasks.Task removeSnapshotAsync(string vpsName, string snapshotName)
        {
            return base.Channel.removeSnapshotAsync(vpsName, snapshotName);
        }
        
        public System.Threading.Tasks.Task revertVpsBackupAsync(string vpsName, int vpsBackupId)
        {
            return base.Channel.revertVpsBackupAsync(vpsName, vpsBackupId);
        }
        
        public System.Threading.Tasks.Task<Vps> getVpsAsync(string vpsName)
        {
            return base.Channel.getVpsAsync(vpsName);
        }
        
        public System.Threading.Tasks.Task<Vps[]> getVpsesAsync()
        {
            return base.Channel.getVpsesAsync();
        }
        
        public System.Threading.Tasks.Task<Snapshot[]> getSnapshotsByVpsAsync(string vpsName)
        {
            return base.Channel.getSnapshotsByVpsAsync(vpsName);
        }
        
        public System.Threading.Tasks.Task<VpsBackup[]> getVpsBackupsByVpsAsync(string vpsName)
        {
            return base.Channel.getVpsBackupsByVpsAsync(vpsName);
        }
        
        public System.Threading.Tasks.Task<OperatingSystem[]> getOperatingSystemsAsync()
        {
            return base.Channel.getOperatingSystemsAsync();
        }
        
        public System.Threading.Tasks.Task installOperatingSystemAsync(string vpsName, string operatingSystemName, string hostname)
        {
            return base.Channel.installOperatingSystemAsync(vpsName, operatingSystemName, hostname);
        }
        
        public System.Threading.Tasks.Task installOperatingSystemUnattendedAsync(string vpsName, string operatingSystemName, string base64InstallText)
        {
            return base.Channel.installOperatingSystemUnattendedAsync(vpsName, operatingSystemName, base64InstallText);
        }
        
        public System.Threading.Tasks.Task<string[]> getIpsForVpsAsync(string vpsName)
        {
            return base.Channel.getIpsForVpsAsync(vpsName);
        }
        
        public System.Threading.Tasks.Task<string[]> getAllIpsAsync()
        {
            return base.Channel.getAllIpsAsync();
        }
        
        public System.Threading.Tasks.Task addIpv6ToVpsAsync(string vpsName, string ipv6Address)
        {
            return base.Channel.addIpv6ToVpsAsync(vpsName, ipv6Address);
        }
        
        public System.Threading.Tasks.Task updatePtrRecordAsync(string ipAddress, string ptrRecord)
        {
            return base.Channel.updatePtrRecordAsync(ipAddress, ptrRecord);
        }
        
        public System.Threading.Tasks.Task setCustomerLockAsync(string vpsName, bool enabled)
        {
            return base.Channel.setCustomerLockAsync(vpsName, enabled);
        }
        
        public System.Threading.Tasks.Task handoverVpsAsync(string vpsName, string targetAccountname)
        {
            return base.Channel.handoverVpsAsync(vpsName, targetAccountname);
        }
        
        public System.Threading.Tasks.Task<AvailabilityZone[]> getAvailableAvailabilityZonesAsync()
        {
            return base.Channel.getAvailableAvailabilityZonesAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.VpsServicePort))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.VpsServicePort))
            {
                return new System.ServiceModel.EndpointAddress("https://api.transip.nl/soap/?service=VpsService");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return VpsServicePortTypeClient.GetBindingForEndpoint(EndpointConfiguration.VpsServicePort);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return VpsServicePortTypeClient.GetEndpointAddress(EndpointConfiguration.VpsServicePort);
        }
        
        public enum EndpointConfiguration
        {
            
            VpsServicePort,
        }
    }
}
